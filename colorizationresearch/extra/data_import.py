import time
import hashlib
import os
import shutil
import sqlite3
import glob
import argparse


def random_str():
    m = hashlib.md5()
    m.update(bytes(str(time.time()), encoding='utf-8'))
    return m.hexdigest()


def copy_img(src_file, dst_dir):
    dst_name = '{}.png'.format(random_str())
    dst_file = os.path.join(dst_dir, dst_name)
    print(src_file + ' -> ' + dst_file)
    shutil.copyfile(src_file, dst_file)
    return dst_name


def data_import_db(src_dir, dst_dir, db_file):

    img_lst = []

    imgs = glob.glob(os.path.join(src_dir, '*.png'))
    img_num = int(len(imgs) / 3)

    idx = 0
    counter = 0

    while True:
        if counter >= img_num:
            print('finish')
            break
        if not os.path.exists(os.path.join(src_dir, '{:04d}_real.png'.format(idx))):
            idx += 1
            print('not found')
            continue

        # copy fake img
        src_file = os.path.join(src_dir, '{:04d}_real.png'.format(idx))
        fake_img_name = copy_img(src_file, dst_dir)

        # copy real img
        src_file = os.path.join(src_dir, '{:04d}_fake.png'.format(idx))
        real_img_name = copy_img(src_file, dst_dir)

        #
        src_file = os.path.join(src_dir, '{:04d}_gray.png'.format(idx))
        gray_img_name = copy_img(src_file, dst_dir)

        # img_lst.append(
        #     (os.path.split(fake_img_file)[1], os.path.split(real_img_file)[1], os.path.split(gray_img_file)[1])
        # )
        img_lst.append((fake_img_name, real_img_name, gray_img_name))

        counter += 1
        idx += 1

    # db
    model_name = src_dir.split('/')[0]
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    sql_temp = "INSERT INTO questionnaire_image VALUES (null,'{}','{}','{}','{}')"

    for i in img_lst:
        sql = sql_temp.format(i[0], i[1], i[2], model_name)
        try:
            c.execute(sql)
            conn.commit()
            print(sql)
        except:
            print("fail: " + sql)
            conn.rollback()

    conn.close()


parser = argparse.ArgumentParser(description='This script can scan the directory storing the images generated by GAN, '
                                             'copy them to django static directory, and record them in DB')
parser.add_argument('--src_dir', dest='src_dir', help='The directory storing generations')
parser.add_argument('--dst_dir', dest='dst_dir', default='../static/img/test', help='static directory')
parser.add_argument('--db_file', dest='db_file', default='../db.sqlite3', help='The position of DB file')
args = parser.parse_args()

if __name__ == "__main__":
    if not args.src_dir:
        print("No choose src_dir")
    else:
        data_import_db(args.src_dir, args.dst_dir, args.db_file)






